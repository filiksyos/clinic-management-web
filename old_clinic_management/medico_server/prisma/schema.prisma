generator client {
  provider        = "prisma-client-js"
  previewFeatures = ["postgresqlExtensions"]
}

datasource db {
  provider   = "postgresql"
  url        = env("DATABASE_URL")
  extensions = [uuid_ossp(map: "uuid-ossp")]
}

enum UserStatus {
  BLOCKED
  ACTIVE
  PENDING
  DELETED
}

enum Gender {
  MALE
  FEMALE
  OTHER
  UNKNOWN
}

enum UserRole {
  ADMIN
  DOCTOR
  PATIENT
  RECEPTIONIST
}

model User {
  id                 String     @id @default(uuid())
  email              String     @unique
  password           String
  role               UserRole
  needPasswordChange Boolean    @default(true)
  status             UserStatus @default(ACTIVE)
  createdAt          DateTime   @default(now())
  updatedAt          DateTime   @updatedAt

  @@map("users")
}

model Admin {
  id                 String         @id @default(uuid())
  email              String         @unique
  password           String
  firstName          String
  lastName           String
  profilePhoto       String?
  contactNumber      String
  address            String?
  isDeleted          Boolean        @default(false)
  createdAt          DateTime       @default(now())
  updatedAt          DateTime       @updatedAt
  status             UserStatus     @default(ACTIVE)
  needPasswordChange Boolean        @default(true)
  doctors            Doctor[]
  patients           Patient[]
  receptionists      Receptionist[]

  @@map("admins")
}

model Doctor {
  id                  String   @id @default(uuid())
  firstName           String
  lastName            String
  profilePhoto        String?
  contactNumber       String?
  address             String?
  registrationNumber  String?
  experience          Int?     @default(0)
  qualification       String?
  currentWorkingPlace String?
  designation         String?
  gender              Gender?
  appointmentFee      Float?
  isDeleted           Boolean  @default(false)
  createdAt           DateTime @default(now())
  updatedAt           DateTime @updatedAt
  adminId             String
  admin               Admin    @relation(fields: [adminId], references: [id])

  @@map("doctors")
}

model Patient {
  id            String   @id @default(uuid())
  firstName     String
  lastName      String
  profilePhoto  String?
  contactNumber String?
  address       String?
  isDeleted     Boolean  @default(false)
  createdAt     DateTime @default(now())
  updatedAt     DateTime @updatedAt
  adminId       String
  admin         Admin    @relation(fields: [adminId], references: [id])

  @@map("patients")
}

model Receptionist {
  id            String   @id @default(uuid())
  firstName     String
  lastName      String
  profilePhoto  String?
  contactNumber String?
  address       String?
  isDeleted     Boolean  @default(false)
  createdAt     DateTime @default(now())
  updatedAt     DateTime @updatedAt
  adminId       String
  admin         Admin    @relation(fields: [adminId], references: [id])

  @@map("receptionists")
}
